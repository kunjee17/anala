import type { ServiceAccount } from "firebase-admin";
import { cert, getApp, getApps, initializeApp } from "firebase-admin/app";
import { getAuth } from "firebase-admin/auth";
import { getFirestore } from "firebase-admin/firestore";
import type { Post } from "../components";
import { POSTS } from "./fireHelper.ts";

const serviceAccount = {
	type: "service_account",
	project_id: import.meta.env.PUBLIC_FIREBASE_PROJECT_ID,
	private_key_id: import.meta.env.FIREBASE_PRIVATE_KEY_ID,
	private_key: import.meta.env.FIREBASE_PRIVATE_KEY,
	client_email: import.meta.env.FIREBASE_CLIENT_EMAIL,
	client_id: import.meta.env.FIREBASE_CLIENT_ID,
	auth_uri: import.meta.env.FIREBASE_AUTH_URI,
	token_uri: import.meta.env.FIREBASE_TOKEN_URI,
	auth_provider_x509_cert_url: import.meta.env.FIREBASE_AUTH_CERT_URL,
	client_x509_cert_url: import.meta.env.FIREBASE_CLIENT_CERT_URL,
};

const app = !getApps().length
	? initializeApp({
			credential: cert(serviceAccount as ServiceAccount),
		})
	: getApp();

const auth = getAuth(app);
const firestore = app ? getFirestore(app) : getFirestore();

/**
 * Verify ID Token that is being passed from client
 * @param idToken - is idToken that is being generated by Firebase Client Auth
 */
export const verifyIdToken = async (idToken: string) => {
	return await auth.verifyIdToken(idToken);
};

/**
 * Create Session so User stay logged in for longer time
 * @param idToken - is idToken that is being generated on client side and pass to server
 * @param days - No of Days session should stay active
 */
export const createSessionCookie = async (idToken: string, days: number) => {
	return await auth.createSessionCookie(idToken, {
		expiresIn: 60 * 60 * 24 * days * 1000,
	});
};

export const getUser = async (cookie: string) => {
	try {
		const decodedIdToken = await auth.verifySessionCookie(cookie, true);
		return await auth.getUser(decodedIdToken.uid);
	} catch (error) {
		return null;
	}
};

export const getPostBySlug = async (slug: string) => {
	const posts = await firestore
		.collection(POSTS)
		.where("slug", "==", slug)
		.get();
	const postSnap = posts.docs[0];

	return postSnap?.exists
		? ({ id: postSnap.id, ...postSnap.data() } as Post)
		: null;
};

export const getPostById = async (id: string) => {
	const docRef = firestore.collection("posts").doc(id || "");
	const docSnap = await docRef.get();
	return docSnap.exists
		? ({ id: docSnap.id, ...docSnap.data() } as Post)
		: null;
};
